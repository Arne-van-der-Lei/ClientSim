"use strict";(self.webpackChunkclient_sim=self.webpackChunkclient_sim||[]).push([[8376],{3905:function(t,e,n){n.d(e,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),u=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=u(t.components);return r.createElement(p.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),c=u(n),m=a,y=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(y,o(o({ref:e},s),{},{components:n})):r.createElement(y,o({ref:e},s))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9399:function(t,e,n){n.r(e),n.d(e,{assets:function(){return s},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"script-execution-order",title:"Script Execution Order",hide_title:!0},p="Script Execution Order",u={unversionedId:"systems/script-execution-order",id:"systems/script-execution-order",title:"Script Execution Order",description:"| Execution Order | System Name          | Description                                                                                                                                                    |",source:"@site/docs/systems/script-execution-order.md",sourceDirName:"systems",slug:"/systems/script-execution-order",permalink:"/systems/script-execution-order",editUrl:"https://github.com/vrchat-community/ClientSim/Docs/Source/docs/systems/script-execution-order.md",tags:[],version:"current",frontMatter:{id:"script-execution-order",title:"Script Execution Order",hide_title:!0},sidebar:"tutorialSidebar",previous:{title:"Unity Event System",permalink:"/systems/runtime/unity-event-system"}},s={},d=[],c={toc:d};function m(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"script-execution-order"},"Script Execution Order"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Execution Order"),(0,i.kt)("th",{parentName:"tr",align:null},"System Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"-Infinity"),(0,i.kt)("td",{parentName:"tr",align:null},"UnityInputSystem"),(0,i.kt)("td",{parentName:"tr",align:null},"Unity InputSystem updates before all MonoBehaviours. Input from user buttons are sent to ClientSimInput and events are dispatched.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"-3000"),(0,i.kt)("td",{parentName:"tr",align:null},"TrackingProvider"),(0,i.kt)("td",{parentName:"tr",align:null},"Input is checked to update the TrackignProvider. For example: Desktop head X rotation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"-3000"),(0,i.kt)("td",{parentName:"tr",align:null},"PlayerController"),(0,i.kt)("td",{parentName:"tr",align:null},"Update Player position before raycasting.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"-2000"),(0,i.kt)("td",{parentName:"tr",align:null},"PlayerRaycaster"),(0,i.kt)("td",{parentName:"tr",align:null},"Update the position of the PlayerHands to TrackingProvider hand data. Raycast to find interactables in the world. This must happen before EventSystems update.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"-1000"),(0,i.kt)("td",{parentName:"tr",align:null},"Unity Event System"),(0,i.kt)("td",{parentName:"tr",align:null},"Send mouse events to interact with UI. Order cannot be changed.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"ClientSimBehaviours"),(0,i.kt)("td",{parentName:"tr",align:null})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"0"),(0,i.kt)("td",{parentName:"tr",align:null},"UdonBehaviour"),(0,i.kt)("td",{parentName:"tr",align:null},"Send Update Events to Udon Programs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},"UdonInput"),(0,i.kt)("td",{parentName:"tr",align:null},"This must happen after UdonBehaviour.Update to ensure proper event order.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"10000"),(0,i.kt)("td",{parentName:"tr",align:null},"ClientSimBaseInput"),(0,i.kt)("td",{parentName:"tr",align:null},"Update current frame tick for Input Events. Only needed to ensure tests and playmode act the same relating to when Input is processed.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"30000"),(0,i.kt)("td",{parentName:"tr",align:null},"PlayerStationManager"),(0,i.kt)("td",{parentName:"tr",align:null},"Update the position of players on a station as late as possible so all other scripts have had time to evaluate first.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"30001"),(0,i.kt)("td",{parentName:"tr",align:null},"TooltipManager"),(0,i.kt)("td",{parentName:"tr",align:null},"Update the position of Tooltip visuals after finalizing the player's position.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"31000"),(0,i.kt)("td",{parentName:"tr",align:null},"PostLateUpdater"),(0,i.kt)("td",{parentName:"tr",align:null},"VRChat's PostLateUpdate event sent to UdonBehaviours.")))))}m.isMDXComponent=!0}}]);